{
  "version": 3,
  "sources": ["../lib/smaxsorted.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isPositiveZerof = require( '@stdlib/math-base-assert-is-positive-zerof' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - sorted input array\n* @param {integer} stride - stride length\n* @returns {number} maximum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var N = x.length;\n*\n* var v = smaxsorted( N, x, 1 );\n* // returns 3.0\n*/\nfunction smaxsorted( N, x, stride ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tv1 = x[ (1-N) * stride ];\n\t\tv2 = x[ 0 ];\n\t} else {\n\t\tv1 = x[ 0 ];\n\t\tv2 = x[ (N-1) * stride ];\n\t}\n\tif ( isnanf( v1 ) || isnanf( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isPositiveZerof( v1 ) || isPositiveZerof( v2 ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smaxsorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isPositiveZerof = require( '@stdlib/math-base-assert-is-positive-zerof' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - sorted input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} maximum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smaxsorted( N, x, 2, 1 );\n* // returns 4.0\n*/\nfunction smaxsorted( N, x, stride, offset ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tv1 = x[ offset ];\n\tv2 = x[ offset + ((N-1)*stride) ];\n\tif ( isnanf( v1 ) || isnanf( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isPositiveZerof( v1 ) || isPositiveZerof( v2 ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smaxsorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar smaxsorted = require( './smaxsorted.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( smaxsorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = smaxsorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a sorted single-precision floating-point strided array.\n*\n* @module @stdlib/stats-base-smaxsorted\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var smaxsorted = require( '@stdlib/stats-base-smaxsorted' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var N = x.length;\n*\n* var v = smaxsorted( N, x, 1 );\n* // returns 3.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var smaxsorted = require( '@stdlib/stats-base-smaxsorted' );\n*\n* var x = new Float32Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smaxsorted.ndarray( N, x, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAkB,QAAS,4CAA6C,EAsB5E,SAASC,EAAYC,EAAGC,EAAGC,EAAS,CACnC,IAAIC,EACAC,EAEJ,OAAKJ,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAG,CAAE,GAERC,EAAS,GACbC,EAAKF,GAAI,EAAED,GAAKE,CAAO,EACvBE,EAAKH,EAAG,CAAE,IAEVE,EAAKF,EAAG,CAAE,EACVG,EAAKH,GAAID,EAAE,GAAKE,CAAO,GAEnBL,EAAQM,CAAG,GAAKN,EAAQO,CAAG,EACxB,IAEHD,IAAOC,EACNN,EAAiBK,CAAG,GAAKL,EAAiBM,CAAG,EAC1C,EAEDD,EAEHA,EAAKC,EACFD,EAEDC,EACR,CAKAR,EAAO,QAAUG,IChFjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAkB,QAAS,4CAA6C,EAwB5E,SAASC,EAAYC,EAAGC,EAAGC,EAAQC,EAAS,CAC3C,IAAIC,EACAC,EAEJ,OAAKL,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAG,CAAE,GAEbG,EAAKH,EAAGE,CAAO,EACfE,EAAKJ,EAAGE,GAAWH,EAAE,GAAGE,CAAQ,EAC3BL,EAAQO,CAAG,GAAKP,EAAQQ,CAAG,EACxB,IAEHD,IAAOC,EACNP,EAAiBM,CAAG,GAAKN,EAAiBO,CAAG,EAC1C,EAEDD,EAEHA,EAAKC,EACFD,EAEDC,EACR,CAKAT,EAAO,QAAUG,IC7EjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAa,IACbC,EAAU,IAKdF,EAAaC,EAAY,UAAWC,CAAQ,EAK5CH,EAAO,QAAUE,ICejB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_smaxsorted", "__commonJSMin", "exports", "module", "isnanf", "isPositiveZerof", "smaxsorted", "N", "x", "stride", "v1", "v2", "require_ndarray", "__commonJSMin", "exports", "module", "isnanf", "isPositiveZerof", "smaxsorted", "N", "x", "stride", "offset", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "smaxsorted", "ndarray", "main"]
}
